I".<h2 id="1list-initialization">1.list initialization:</h2>
<p>Cause error message when Narrowing conversion occur.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// c++98</span>
   <span class="kt">int</span> <span class="n">largeNum</span> <span class="o">=</span> <span class="mi">500000</span><span class="p">;</span>
   <span class="c1">// c++11</span>
   <span class="kt">short</span> <span class="n">anotherNum</span><span class="p">{</span><span class="n">largeNum</span><span class="p">};</span>  <span class="c1">// error! Amend types</span>
   <span class="kt">int</span> <span class="n">a</span><span class="p">{</span><span class="mi">10</span><span class="p">};</span>
   <span class="kt">float</span> <span class="n">b</span><span class="p">{</span><span class="n">largeNum</span><span class="p">};</span>   <span class="c1">// error! An int may be narrowed</span>
</code></pre></div></div>

<h2 id="2automatic-type-infereence-using-auto">2.Automatic Type Infereence Using <strong><em>auto</em></strong></h2>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">gameOver</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="k">auto</span> <span class="n">smallNumber</span> <span class="o">=</span> <span class="mf">0.0001</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">gameOver</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">smallNumber</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="3-constant-expressions-using-constexpr">3. Constant expressions using <strong><em>constexpr</em></strong></h2>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constexpr</span> <span class="kt">double</span> <span class="nf">GetPi</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mf">22.0</span> <span class="o">/</span> <span class="mi">7</span><span class="p">;}</span>
<span class="k">constexpr</span> <span class="kt">double</span> <span class="nf">TwicePi</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">GetPi</span><span class="p">();</span> <span class="p">}</span>

<span class="kt">double</span> <span class="nf">GetPi</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mf">22.0</span> <span class="o">/</span> <span class="mi">7</span><span class="p">;}</span>
<span class="k">constexpr</span> <span class="kt">double</span> <span class="nf">TwicePi</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">GetPi</span><span class="p">();</span> <span class="p">}</span>  <span class="c1">// error!</span>
</code></pre></div></div>

:ET