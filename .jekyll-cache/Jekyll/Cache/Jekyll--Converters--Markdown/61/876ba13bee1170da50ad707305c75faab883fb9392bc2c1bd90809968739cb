I"34<h2 id="如何封装一个atari-game环境">如何封装一个atari game环境</h2>

<p>Deepmind公司凭借着强化学习在atari game上的优异表现, 闻名于世. 强化学习也一时炙手可热. 想要学习强化学</p>

<p>习的知识, 除了学习理论公式, 那便是算法实作了. 在实作算法的第一步即, 需要一个游戏环境(environment), 假设游戏环境已经存在, 那么接下来就需要对其进行封装(wrapper), 使游戏的按照我们需要的格式与逻辑进行输出.</p>

<p><strong>以下用代码和注释来详细说明.</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">gym</span>
<span class="kn">import</span> <span class="nn">cv2</span>

<span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env_id</span><span class="p">):</span>
		<span class="c1"># 假设环境名称为: breakoutnoframeskip-v0
</span>        <span class="c1"># 这是一个视频类的游戏, 它的state是一张图片
</span>		<span class="n">env_id</span> <span class="o">=</span> <span class="s">'breakoutnoframeskip-v0'</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skip_frame</span> <span class="o">=</span> <span class="mi">4</span>
        <span class="c1"># Deepmind 在做视频类游戏时, 每次输入网络的是4帧图像,
</span>        <span class="c1"># 在这4帧图像中, 采取同一个动作, 文献中称为frame skip, 值置为4
</span>        <span class="c1"># self.obs2max 存储的是动作与环境交互4次, 产生4个新状态的后两个状态的处理结果
</span>        <span class="c1"># 它将作为一个新的训练帧append在self.obs4stack的最后
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">obs2max</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">84</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">skip_frame</span><span class="p">))</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">rewards</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">lives</span> <span class="o">=</span> <span class="mi">3</span>	<span class="c1"># 游戏开始时 有几条命
</span>    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
        <span class="n">reward</span> <span class="o">=</span> <span class="mf">0.</span>
        <span class="n">done</span> <span class="o">=</span> <span class="bp">False</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">skip_frame</span><span class="p">):</span>
            
            <span class="n">obs</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">done</span><span class="p">,</span> <span class="n">info</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">step</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="c1"># 4帧图像中, 采取同一个动作
</span>            
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">skip_frame</span><span class="o">//</span><span class="mi">2</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">obs2max</span><span class="p">[</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_process_obs</span><span class="p">(</span><span class="n">obs</span><span class="p">)</span>
            
            <span class="n">reward</span> <span class="o">+=</span> <span class="n">r</span>
            <span class="n">lives</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">unwrapped</span><span class="p">.</span><span class="n">ale</span><span class="p">.</span><span class="n">lives</span><span class="p">()</span> <span class="c1"># 当前有几条命
</span>            
            <span class="k">if</span> <span class="n">lives</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">lives</span><span class="p">:</span> <span class="c1"># 如果发现命丢了, 说明这个episode结束了
</span>                <span class="n">done</span> <span class="o">=</span> <span class="bp">True</span>
                
            <span class="bp">self</span><span class="p">.</span><span class="n">lives</span> <span class="o">=</span> <span class="n">lives</span>
            
            <span class="k">if</span> <span class="n">done</span><span class="p">:</span>  <span class="c1"># 如果结束了 就不需要继续执行动作了
</span>                <span class="k">break</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">rewards</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">reward</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">done</span><span class="p">:</span>  <span class="c1"># Episode结束了, 返回一些统计信息, 来描述这局游戏, 也可以用作debug.
</span>            <span class="n">episode_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">"reward"</span><span class="p">:</span> <span class="nb">sum</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">rewards</span><span class="p">),</span>
                           <span class="s">"length"</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">rewards</span><span class="p">)}</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">episode_info</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">obs</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">obs2max</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
            
            <span class="c1"># 其实 self.obs4stack 用双向队列(deque)的话, 会显得更加自然
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">roll</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">,</span> <span class="n">shift</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">[...,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">obs</span> <span class="c1"># 加入新的一帧
</span>        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">,</span> <span class="n">reward</span><span class="p">,</span> <span class="n">done</span><span class="p">,</span> <span class="n">episode_info</span>
    
    <span class="c1"># 纵观整个step函数, 我们可以描述一下数据的堆栈的情况
</span>    <span class="c1"># 游戏帧数    ****|****|****|****|****|****|
</span>    <span class="c1"># 执行动作    aaaa|bbbb|vvvv|kkkk|mmmm|jjjj|
</span>    <span class="c1"># 训练数据    1234|234F|34FM|4FMB|FMBJ|MBJL|
</span>    
    <span class="k">def</span> <span class="nf">reset</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="n">obs</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span>
        
        <span class="n">obs</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_process_obs</span><span class="p">(</span><span class="n">obs</span><span class="p">)</span>
        <span class="c1"># 初始化self.obs4stack
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">[...,</span> <span class="mi">0</span><span class="p">:]</span> <span class="o">=</span> <span class="n">obs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">[...,</span> <span class="mi">1</span><span class="p">:]</span> <span class="o">=</span> <span class="n">obs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">[...,</span> <span class="mi">2</span><span class="p">:]</span> <span class="o">=</span> <span class="n">obs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span><span class="p">[...,</span> <span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="n">obs</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">rewards</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># 清空rewards
</span>        
        <span class="bp">self</span><span class="p">.</span><span class="n">lives</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">unwrapped</span><span class="p">.</span><span class="n">ale</span><span class="p">.</span><span class="n">lives</span><span class="p">()</span> <span class="c1"># 重置生命
</span>        
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">obs4stack</span>  <span class="c1"># reset 后返回state
</span>    
    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">_process_obs</span><span class="p">(</span><span class="n">obs</span><span class="p">):</span>
        
        <span class="c1"># 彩图变灰度图
</span>        <span class="n">obs</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2GRAY</span><span class="p">)</span>
        <span class="c1"># 84 是deepmind 网络的输入尺寸
</span>        <span class="n">obs</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="p">(</span><span class="mi">84</span><span class="p">,</span> <span class="mi">84</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="p">.</span><span class="n">INTER_AREA</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">obs</span><span class="p">[:,</span> <span class="p">:,</span> <span class="bp">None</span><span class="p">]</span>  <span class="c1"># shape is [84, 84, 1]
</span></code></pre></div></div>

<p>最近特别丧, 很久没有更新自己的部落格(虽然只有自己看)了,  不过当自己弄懂了很有用的知识的时候, 还是特别特别想要把它写下来.</p>

:ET