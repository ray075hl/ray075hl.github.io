I"bp<p>使用FCN来做字符分割，参考这篇文章的算法
Chinese/English mixed Character Segmentation as Semantic Segmentation
算法很简单，只有两个关键步骤
1.搭建FCN的网络框架。
2.解决正负样本不均衡的问题。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">import</span> <span class="nn">keras</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Conv2D</span><span class="p">,</span> <span class="n">MaxPooling2D</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">LSTM</span><span class="p">,</span> <span class="n">GRU</span><span class="p">,</span> <span class="n">Masking</span><span class="p">,</span> <span class="n">UpSampling2D</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Activation</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Flatten</span><span class="p">,</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">merge</span><span class="p">,</span> <span class="n">Reshape</span><span class="p">,</span> <span class="n">Lambda</span>
<span class="kn">from</span> <span class="nn">keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>
<span class="kn">from</span> <span class="nn">keras.preprocessing.sequence</span> <span class="kn">import</span> <span class="n">pad_sequences</span>
<span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Model</span>
<span class="kn">from</span> <span class="nn">keras</span> <span class="kn">import</span> <span class="n">backend</span> <span class="k">as</span> <span class="n">K</span>
<span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">cv2</span>

<span class="c1">#----------------load training data--------------------------
</span><span class="n">training_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'fcn_training_data.npy'</span><span class="p">)</span>
<span class="n">training_label</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'fcn_training_label.npy'</span><span class="p">)</span>
<span class="c1">#----------------load training data--------------------------
</span>

<span class="n">sess</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
<span class="n">K</span><span class="p">.</span><span class="n">set_session</span><span class="p">(</span><span class="n">sess</span><span class="p">)</span>
<span class="n">img_rows</span> <span class="o">=</span> <span class="mi">48</span>   <span class="c1">#  height
</span><span class="n">img_cols</span> <span class="o">=</span> <span class="mi">512</span>  <span class="c1">#  width
# tensorflow inputs
# inputs = tf.placeholder(tf.float32, shape=(None, img_rows, img_cols, 3))
</span><span class="n">labels</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">img_cols</span><span class="p">))</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">beta</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">learning_rate</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">Input</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="n">img_rows</span><span class="p">,</span> <span class="n">img_cols</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># keras
</span>
<span class="n">conv1</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">inputs</span><span class="p">)</span>
<span class="n">pool1</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">conv1</span><span class="p">)</span>
<span class="n">conv2</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">pool1</span><span class="p">)</span>
<span class="n">pool2</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">conv2</span><span class="p">)</span>
<span class="n">conv3</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">pool2</span><span class="p">)</span>
<span class="n">pool3</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">conv3</span><span class="p">)</span>
<span class="n">conv4</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">pool3</span><span class="p">)</span>
<span class="n">pool4</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">conv4</span><span class="p">)</span>
<span class="n">conv5</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">pool4</span><span class="p">)</span>
<span class="n">pool5</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">conv5</span><span class="p">)</span>

<span class="n">up1</span> <span class="o">=</span> <span class="n">UpSampling2D</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">pool5</span><span class="p">)</span>
<span class="n">up_conv1</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">up1</span><span class="p">)</span>
<span class="n">up2</span> <span class="o">=</span> <span class="n">UpSampling2D</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">up_conv1</span><span class="p">)</span>
<span class="n">up_conv2</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">up2</span><span class="p">)</span>
<span class="n">up3</span> <span class="o">=</span> <span class="n">UpSampling2D</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">up_conv2</span><span class="p">)</span>
<span class="n">up_conv3</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">up3</span><span class="p">)</span>
<span class="n">up4</span> <span class="o">=</span> <span class="n">UpSampling2D</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">up_conv3</span><span class="p">)</span>
<span class="n">up_conv4</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">up4</span><span class="p">)</span>
<span class="n">up5</span> <span class="o">=</span> <span class="n">UpSampling2D</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))(</span><span class="n">up_conv4</span><span class="p">)</span>
<span class="n">up_conv5</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'sigmoid'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)(</span><span class="n">up5</span><span class="p">)</span>

<span class="n">out</span> <span class="o">=</span> <span class="n">Flatten</span><span class="p">()(</span><span class="n">up_conv5</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">inputs</span><span class="p">],</span> <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">out</span><span class="p">])</span>
<span class="n">loss</span> <span class="o">=</span> <span class="o">-</span><span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span><span class="o">*</span><span class="n">tf</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">out</span><span class="p">)</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">labels</span><span class="p">)</span><span class="o">*</span><span class="n">tf</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">out</span><span class="p">))</span><span class="o">*</span><span class="mi">1000</span>
<span class="n">train_setp</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">train</span><span class="p">.</span><span class="n">MomentumOptimizer</span><span class="p">(</span><span class="n">learning_rate</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">).</span><span class="n">minimize</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>


<span class="n">init_op</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">global_variables_initializer</span><span class="p">()</span>
<span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">init_op</span><span class="p">)</span>
<span class="n">TRAINING_EPOCHS</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">with</span> <span class="n">sess</span><span class="p">.</span><span class="n">as_default</span><span class="p">():</span>
    <span class="n">batch_num</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">acc_pos</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">acc_neg</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">al</span> <span class="o">=</span> <span class="mf">0.9</span>
    <span class="n">be</span> <span class="o">=</span> <span class="mf">0.1</span>
    <span class="n">lr</span> <span class="o">=</span> <span class="mf">0.0001</span>
    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">TRAINING_EPOCHS</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5000</span><span class="p">):</span>

            <span class="n">a</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">b</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">c</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">d</span> <span class="o">=</span> <span class="mf">0.0</span>

            <span class="c1">#x_batch, y_batch = next(name_training_data_generator(8))
</span>            <span class="n">x_batch</span> <span class="o">=</span> <span class="n">training_img</span>  <span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">10</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="mi">10</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span>
            <span class="n">y_batch</span> <span class="o">=</span> <span class="n">training_label</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">10</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="mi">10</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span>
            <span class="n">train_setp</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">inputs</span><span class="p">:</span> <span class="n">x_batch</span><span class="p">,</span> <span class="n">labels</span><span class="p">:</span> <span class="n">y_batch</span><span class="p">,</span> 
                                      <span class="n">alpha</span><span class="p">:</span> <span class="n">al</span><span class="p">,</span> <span class="n">beta</span><span class="p">:</span> <span class="n">be</span><span class="p">,</span> <span class="n">learning_rate</span><span class="p">:</span> <span class="n">lr</span><span class="p">})</span>
            <span class="n">out_result</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">([</span><span class="n">out</span><span class="p">],</span> <span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">inputs</span><span class="p">:</span> <span class="n">x_batch</span><span class="p">,</span> <span class="n">labels</span><span class="p">:</span> <span class="n">y_batch</span><span class="p">,</span>                                           <span class="n">alpha</span><span class="p">:</span> <span class="n">al</span><span class="p">,</span> <span class="n">beta</span><span class="p">:</span> <span class="n">be</span><span class="p">,</span> <span class="n">learning_rate</span><span class="p">:</span> <span class="n">lr</span><span class="p">})</span>
            <span class="n">loss_result</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">([</span><span class="n">loss</span><span class="p">],</span> <span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">inputs</span><span class="p">:</span> <span class="n">x_batch</span><span class="p">,</span> <span class="n">labels</span><span class="p">:</span> <span class="n">y_batch</span><span class="p">,</span>                                         <span class="n">alpha</span><span class="p">:</span> <span class="n">al</span><span class="p">,</span> <span class="n">beta</span><span class="p">:</span> <span class="n">be</span><span class="p">,</span> <span class="n">learning_rate</span><span class="p">:</span> <span class="n">lr</span><span class="p">})</span>
            <span class="n">y_pred</span> <span class="o">=</span> <span class="n">out_result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># shape [10, 512]
</span>            <span class="n">y_pred</span><span class="p">[</span><span class="n">y_pred</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="n">y_pred</span><span class="p">[</span><span class="n">y_pred</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">h</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="n">y_pred</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_pred</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

            <span class="c1"># ---------------------------------------------
</span>            <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">y_pred</span><span class="o">*</span><span class="n">y_batch</span><span class="p">)</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">y_batch</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">h</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">y_pred</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">y_batch</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="n">c</span> <span class="o">+=</span> <span class="mf">1.0</span>
            <span class="n">d</span> <span class="o">=</span> <span class="n">h</span><span class="o">*</span><span class="n">w</span> <span class="o">-</span> <span class="n">b</span>
            <span class="n">acc_pos</span> <span class="o">=</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span>
            <span class="n">acc_neg</span> <span class="o">=</span> <span class="n">c</span><span class="o">/</span><span class="n">d</span>
            <span class="k">if</span> <span class="n">acc_pos</span><span class="o">&lt;</span><span class="n">acc_neg</span><span class="p">:</span>
                <span class="n">delta</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">be</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">)</span>
                <span class="n">al</span> <span class="o">=</span> <span class="n">al</span> <span class="o">+</span> <span class="n">delta</span>
                <span class="n">be</span> <span class="o">=</span> <span class="n">be</span> <span class="o">-</span> <span class="n">delta</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">delta</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">al</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">)</span>
                <span class="n">al</span> <span class="o">=</span> <span class="n">al</span> <span class="o">-</span> <span class="n">delta</span>
                <span class="n">be</span> <span class="o">=</span> <span class="n">be</span> <span class="o">+</span> <span class="n">delta</span>
            <span class="c1"># ----------------------------------------------
</span>
            <span class="n">batch_num</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'batch_num: '</span><span class="p">,</span><span class="n">batch_num</span><span class="p">,</span><span class="s">' loss: '</span><span class="p">,</span><span class="n">loss_result</span><span class="p">,</span> <span class="s">' al: '</span><span class="p">,</span> <span class="n">al</span><span class="p">,</span> <span class="s">' be: '</span><span class="p">,</span> <span class="n">be</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">batch_num</span> <span class="o">%</span> <span class="mi">500</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="s">"""
                save model
                """</span>
            <span class="k">if</span> <span class="n">batch_num</span> <span class="o">&gt;</span> <span class="mi">20000</span><span class="p">:</span>
                <span class="n">lr</span> <span class="o">=</span> <span class="n">lr</span><span class="o">/</span><span class="mi">10</span>
            <span class="k">if</span> <span class="n">batch_num</span> <span class="o">&gt;</span> <span class="mi">40000</span><span class="p">:</span>
                <span class="n">lr</span> <span class="o">=</span> <span class="n">lr</span><span class="o">/</span><span class="mi">10</span>
</code></pre></div></div>
<h2 id="reference">reference</h2>
<p><a href="https://arxiv.org/abs/1611.01982">Chinese/English mixed Character Segmentation as Semantic Segmentation</a></p>
:ET